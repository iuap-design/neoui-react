{
  "compilerOptions": {
    /* Basic Options */
    "target": "ES2015",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": ["dom", "esnext"],                          /* Specify library files to be included in the compilation. */
    "allowJs": true,                       /* 允许编译器编译JS，JSX文件 Allow javascript files to be compiled. */
    // "checkJs": true,                       /* 允许在JS文件中报错，通常与allowJS一起使用 Report errors in .js files. */
    "jsx": "react",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "declaration": true,                      /* 生成声明文件，开启后会自动生成声明文件 Generates corresponding '.d.ts' file. */
    //"declarationDir": "lib",              /* 生成*.d.ts声明文件输出的目录 */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */  // 为声明文件生成sourceMap
    "sourceMap": true,                     /* Generates corresponding '.map' file. */ // 生成目标文件的sourceMap文件
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    // "outDir": "lib",                          /* Redirect output structure to the directory. */
    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                     /* Enable project compilation */
    // "removeComments": true,                /* Do not emit comments to output. */ // 删除注释
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */ // 通过tslib引入helper函数，文件必须是模块
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true,                           /* Enable all strict type-checking options. */  // 开启所有严格的类型检查
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */  // 不允许把null、undefined赋值给其他类型的变量
    "strictFunctionTypes": false,           /* Enable strict checking of function types. */ // 不允许函数参数双向协变
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */ // 类的实例属性必须初始化
    // "strictBindCallApply": true,         // 严格的bind/call/apply检查
    "suppressImplicitAnyIndexErrors": true,   /**允许进行任意类型的索引取值，例如 a[b]**/
    "noImplicitThis": false,                /* Raise error on 'this' expressions with an implied 'any' type. */ // 不允许this有隐式的any类型
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */  // 在代码中注入'use strict'

    /* Additional Checks */
     "noUnusedLocals": true,                /* Report errors on unused locals. */ // 检查只声明、未使用的局部变量(只提示不报错)
     "noUnusedParameters": true,            /* Report errors on unused parameters. */  // 检查未使用的函数参数(只提示不报错)
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */  //每个分支都会有返回值
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */  // 防止switch语句贯穿(即如果没有break语句后面不会执行)

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* 模块解析策略，ts默认用node的解析策略，即相对的方式导入 Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "skipLibCheck": true,
    // "baseUrl": "./next-ui-library/",                       /* 解析非相对模块的基地址，默认是当前目录 Base directory to resolve non-absolute module names. */
    // "paths": {
    //     "@tinper/next-ui": ["lib/index.d.ts"],
    //     // "foo": ["node_modules/foo"],
    //     "*": ["node_modules/*"],
    //     // "foo": ["node_modules/foo"],
    //     }, /* 路径映射，相对于baseUrl ,A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    "typeRoots": [
        "./node_modules/@types/"
        ],                       /* List of folders to include type definitions from. ./node_modules/@types/, ../node_modules/@types/, ../../node_modules/@types/ */ // 声明文件目录，默认时node_modules/@types
    //"types": [],                           /* Type declaration files to be included in compilation. */ // 加载的声明文件包
    "forceConsistentCasingInFileNames": true, // 禁止对同一个文件的不一致的引用
    "allowSyntheticDefaultImports": true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                  /* 允许export=导出，由import from 导入 Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "./",                    /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "./",                       /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */ // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
//    "allowUmdGlobalAccess": true, // 允许在模块中全局变量的方式访问umd模块
    /* Advanced Options */

//    "noEmit": true, // 不输出文件,即编译后不会生成任何js文件
//    "noEmitHelpers": true, // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用
    "noEmitOnError": true // 发生错误时是否生成输出文件

//    "listEmittedFiles": true, // 打印输出文件
//    "listFiles": true// 打印编译的文件(包括引用的声明文件)
  },
  "exclude": [
      "node_modules",
    //   "./packages/**/demo/*",
    //   "./packages/**/demo/**/*"
    ],
  "include": [
    "./index.d.ts",
    "./html.d.ts",
    "./packages/",
    "./packages/**/src/*",
    "./packages/**/src/**/*",
    // "./packages/**/demo/*",
    // "./packages/**/demo/**/*"
  ]
}
